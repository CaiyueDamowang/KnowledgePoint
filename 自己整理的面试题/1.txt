web安全
   安全性主要分为两大块 
       私密性: 不被非法获取和利用
       可靠性: 不丢失 不损坏 不被篡改


攻击类型
    XSS跨站脚本攻击
    CSRF跨站请求伪造
    SQL注入
    点击劫持
    中间人攻击


核心
   基本概念
   攻击原理
   防御措施


安全问题
    用户身份被盗用
    用户秘密泄露
    用户资料被盗取
    网站数据库泄露


同源策略及其规避方法
    同源要求
        协议相同
        域名相同
        端口相同
    限制范围
        cookie localstorage和indexDB无法获取
        DOM无法获得
        Ajax请求不能发送    

        参考链接: 浏览器同源策略 https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html

点击劫持 
    点击挟持是一种视觉欺骗的攻击手段 攻击者将需要攻击的网站通过iframe嵌套的方式嵌入自己的网页中 并将iframe设置为透明 在页面中透出一个按钮诱导用户点击

     对于这种攻击方式 推荐防御的方法有两种
     1. X-FRAME-OPTIONS
     2. JS防御


    X-FRAME-OPTIONS
        X-FRAME-OPTIONS是一个HTTP响应头 在现代浏览器有一个很好的支持 这个HTTP响应头就是为了防御用iframe嵌套的点击劫持攻击

        该响应头有三个值可选 分别是
            DENY 表示页面不允许通过iframe的方式展示
            SAMEORIGIN 表示页面可以在相同域名下通过iframe的方式展示
            ALLOW-FROM 表示页面可以在指定来源的iframe中展示


     JS防御
         对于某些低版本浏览器来说 并不能支持上面的这种方式 那我们只有通过JS的方式来防御点击劫持


中间人攻击
    中间人攻击是攻击方同时与服务端和客户端建立起了连接 并让双方认为连接是安全的 但是实际上整个通信都被攻击者控制了 攻击者不仅能获得双方的通信信息 还能修改通信信息

    通常来说不建议使用公共的WI-FI 因为很可能就会发生中间人攻击的情况 如果你通信的过程中涉及到了某些敏感信息 就完全暴漏给攻击方了

    当然防御中间人攻击其实并不能 只需要增加一个安全通道来传输信息 HTTPS就可以用来防御中间人攻击 但是并不是说使用了HTTPS就可以高枕无忧了 因为如果你没有完全关闭HTTP访问的话 攻击方可以通过某些方式将HTTPS降级HTTP从而实现中间人攻击                 




---------------------------------------------------------------------------------------




XSS跨站脚本攻击
    XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点 进而添加一些代码 嵌入到web页面中去 使别的用户访问都会执行相应的嵌入代码 从而盗取用户资料丶利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式


XSS攻击的危害包括
    1. 获取页面数据
    2. 获得cookie
    3. 劫持前端逻辑
    4. 发送请求
    5. 偷取网站任意数据
    6. 偷取用户资料
    7. 偷取用户密码和登录态
    8. 欺骗用户


XSS攻击分类
     反射型
         通过url参数直接注入

         发出请求时 XSS代码出现在URL中 作为输入提交到服务端 服务端解析后返回 XSS代码随响应内容一起传回给浏览器 最后浏览器执行XSS代码 这个过程像一次反射 故叫做反射型XSS
        
         举个例子
             一个链接 里面的query字段中包含了一个script标签 这个标签的src就是恶意代码 用户点击了这个链接后会向服务端发送请求 服务器返回时也携带了这个XSS代码 然后浏览器将查询的结果写入html 这时恶意代码就被执行了
              
             并不是在url中没有包含script标签的网址都是安全的 可以使用短网址来让网址变得更短

      存储型
          存储型XSS会被保存到数据库 在其他用户访问(前端)到这条数据时 这个代码会在访问用户的浏览器端执行

          举个例子
              比如攻击者在一篇的评论中写入了script标签 这个评论被保存到数据库 当其他用户看到这篇文文章时就会执行这个脚本     

XSS攻击注入点
   HTML节点内容
       如果一个节点内容是动态生成的 而这个内容中包含用户输入的
    HTML属性
        某些节点属性值是由用户输入的内容生成的 那么可能会被封闭标签后添加script标签
    JavaScript代码
        JS中包含由后台注入的变量或用户输入的信息
    富文本          


XSS防御
    对于XSS攻击来讲 通常有两种方式可以用来防御
    1. 转义字符
    2. CSP内容安全策略


    转义字符
        1. 普通的输入 - 编码
               对用户输入数据进行HTML Entity编码(使用转义字符)
               "
               &
               <
               >
               空格
        2. 富文本 - 过滤(黑名单 白名单)
               移除上传的DOM属性 如onerror等
               移除用户上传的style节点丶script节点丶iframe节点等
        3. 较正
               避免直接对HTML Entity解码
               使用DOM Parse转换 较正不配对的DOM标签和属性  


        对于会在DOM中出现的字符串(用户数据)
           <转义为&lt;
           >转义为&gt;
        
        对于可能出现在DOM元素属性上的数据
            "转义为&quot;
            '转义为&9039;
            空格转义为&nbsp;
            但这可能造成多个连续的空格 也可以不对空格转义 但是一定要为属性加双引号

        避免JS中的插入
            因为是用引号将变量包裹起来的 而且被攻击也因为引号被提前结束 所以要做的就是将引号转义
            先 \\ -> \\\\
            再" -> \\"

         富文本
             按照黑名单过滤: script等 但是html标签中能执行html代码的属性太多了 比如onclick onhover onerror
             按照白名单过滤: 只允许某些标签和属性存在的做法: 将HTML解析成树状结构 对于这个DOM树 一个一个的去看是                否存在合法的标签和属性 如果不是就去掉 使用cheerio就可以快速的解析DOM   
             使用npm包来简化操作
    CSP内容安全策略
        CSP本质上就是建立白名单 开发者明确告诉浏览器哪些外部资源可以加载和执行 我们只需要配置规则 如何拦截是由浏览器自己实现的 我们可以通过这种方式来尽量减少XSS攻击

        通常可以通过两种方式来开启CSP
            1. 设置HTTP Header中的Content-Security-Ppolicy
            2. 设置meta标签的方式 <meta http-equiv="Content-Security-Policy">


            以设置HTTP Header来举例
                只允许加载本站资源
                图片只允许加载HTTPS协议
                允许加载任何来源框架         




---------------------------------------------------------------------------------------------




CSRF跨站请求伪造
    打开同一浏览器时其他的网站对本网站造成的影响 原理就是攻击者构造出一个后端请求地址 诱导用户点击或者通过某些途径自动发送请求 如果用户是在登录状态下的话 后端就以为是用户在操作 从而进行相应的逻辑

    举个例子 用户同时打开了A网站和钓鱼网站 假设A网站中有一个通过GET请求提交用户评论的接口 那么攻击者就可以在钓鱼我站中加入一个图片 图片的地址就是评论接口


CSRF攻击原理
    1. 用户登录A网站
    2. A网站确认身份(给客户端cookie)
    3. B网站页面向A网站发送请求(带上A网站身份)


CSRF防御
    1. GET请求不对数据进行修改
    2. 不让第三方网站访问到用户cookie
    3. 阻止第三方网站请求接口
    4. 请求时附带验证信息 比如验证码或者Token


    SameSite
        可以对cookie设置SameSite属性 该属性表示cookie不随着跨域请求发送 可以很大程序减少CSRF的攻击 但是该属性目前并不是所有浏览器都兼容
    Token验证
         cookie是发送时自动带上的 而不会自动带上Token 所以在每次发送时主动发送Token
    Referer验证
         对于需要防范CSRF的请求 我们可以通过验证Referer来判断该请求是否为第三方网站发起的
    隐藏令牌
        主动在HTTP头部中添加令牌信息

    禁止第三方网站带cookies

    same-site属性 只能只有同一站点的请求才能携带cookie


CSRF蠕虫
    如果某些用户打开了被攻击网页 并且用户同时访问了攻击者的网页 那么攻击者的网页就会使用用户的身份发送一些请求 并且常用用户的身份分布一些评论或文章 里面包含攻击者的网页链接其他用户看到了这个用户的这条评论 都甚至可以不点击 其他用户也被盗用身份发送一些恶意请求 这样病毒的传播就会越来越快 影响越来越大


CSRF攻击危害
    利用用户登录态
    用户不知情
    完成业务请求
    盗用用户资金
    冒充用户发帖背锅
    损坏网站名誉




----------------------------------------------------------------------------------------



SQL注入 
     所谓SQL注入 就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串 后台执行SQL语句时直接把前端传入的字段拿来做SQL查询


防御
    永远不要信任用户的输入
    永远不要使用动态拼接sql
    不要把机密信息直接存入     



------------------------------------------------------------------------------------------



                               面试问题
                               

1)xss是什么，怎么预防




2)他说那你说说常见的安全
我说xss crsf 注入sql 点击劫持 中间人劫持
他又问 那中间人劫持详细讲讲 我噼里啪啦讲了一堆 讲到https可以防止 他又问为什么 
我说因为会对数据对称加密 数据加密的密钥非对称加密 他问那为什么劫持不了 我说 
非对称加密的私钥只有服务器有啊 他说那为什么劫持不了 我..不知道


3)然后又问我知道哪些前端安全问题，以及怎么去解决，这里我说的是XSS 和 CSRF, 以及他们的解决办法。


4)对称加密和非对称加密有哪些区别？又有哪些应用
常见的 web 攻击方式有哪些？他们具体是怎么攻击的
sql 注入怎么防范？XSS 怎么防范？CSRF 又怎么防范


5)前端安全有了解吗
关键词：xss，csrf


6)xss 及防御
关键词：储存型、反射型、dom 型


7)CSRF，以及Token验证的Token放在哪里


8)14.项目有没有登录功能，以及怎么防止其他人盗取你的数据之类的


9)知道CSRF吗?怎么解决?
csrf
.前端安全


10)9.web安全问题，xss和crfs，并说下防范措施。
          

11)浏览器安全


12)11.csrf的原理，攻击模式、如何防御？
12.引导介绍一下token。
13.如何诱导用户点你的xss反射性攻击的链接
14.如何让网络更加安全？网络存在什么劫持？


13)8.介绍下网络安全？（xss以及csrf，具体防范方法）


14)正向代理，反向代理


15)具体又问了对称加密和非对称加密区别


16)问了sql注入和防御，我说我有点忘了，把话题转移到了xss


17)RSA加密
xss怎么防御


18)前端的安全有没有了解过  比如XS、CSRF？




19)了解哪些前端安全问题？
了解不多，回答说脚本攻击，面试官继续问知道什么是XSS吗，（？？）我说不就是脚本攻击吗
脚本攻击怎么防范？
真的是不了解，就说好像没有防范的方法，只能提高攻击门槛，跨域引用外部脚本的时候要小心，另外不要相信用户的操作。
防范脚本攻击代码上要怎么做？
其实没懂题目，就说要验证用户的输入，不要使用":javascript"。


20)安全：xss这些


21)xss攻击，表单校验
网络安全


22)6.xss  攻击
7.crsf攻击  为什么浏览器会信任？


23)xss攻击


24)用户量大了，有什么安全问题，内存泄露
网络安全, xss, csrf


25)web安全
















